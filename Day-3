#include<iostream.h>
#include<conio.h>
#include<string.h>

class Employee
{
  public:
  int id;
  char name[12];
  float salary;

  void insert(int i , char n[], float s)
  {
    id = i;
    strcpy(name,n);
    salary = s;
  }
  void display()
  {
   cout <<id<<" "<<name<<" "<<salary<<endl;
  }
 };
 int main()
 {
  clrscr();
  Employee e1;
  e1.insert(12,"Varsha",5373.99);
  e1.display();
  getch();
  return 0;
 }

**********************************************************************************************
VAIABLES ARE PRIVATE AND FUNCTIONS ARE PUBLIC


#include<iostream.h>
#include<conio.h>
#include<string.h>
class Employee
{
  private:
  int id;
  char name[12];
  float salary;

  public:
  void insert(int i , char n[], float s)
  {
    id = i;
    strcpy(name,n);
    salary = s;
  }
  public:
  void display()
  {
   cout <<id<<" "<<name<<" "<<salary<<endl;
  }
 };
 int main()
 {
  clrscr();
  Employee e1;
  e1.insert(12,"Varsha",5373.99);
  e1.display();
  getch();
  return 0;
 }
 **********************************************************************************************************************
PROGRAM USING CONSTRUCTORS WITH AND WITHOUT PARAMETERS AND USER-DEFINED FUNCTIONS

#include<iostream.h>
#include<conio.h>
#include<string.h>

class Employee
{
  public:
  int id;
  char name[12];
  float salary;
  float tax;

  Employee()
  {
   cout<<"Non-parameterized consturctor"<<endl;
   id = 1001;
   strcpy(name, "Varsha");
   salary = 73663.736563;
  }

  Employee(int i , char j[], float k)
  {
   cout<<"Parameterized constructor"<<endl;
   id = i;
   strcpy(name,j);
   salary = k;
  }
  //User-defined Function
  caltax()
  {
    tax = salary*0.2;
    cout<<"Tax Amount: "<<tax<<endl;
  }
  //User-defined Function
  netsalary()
  {
   cout << "Net Salary:"<<salary-tax<<endl;
  }
  //USER-DEFINED FUNCTION
  display()
  {
   cout<<"ID:"<<id<<" NAME:"<<name<<" SALARY:"<<salary<<endl;
  }
};
int main()
{
 clrscr();
 Employee e1;
 Employee e2 = Employee(12,"Varsha",635.73) ;
 //clrscr();
 e1.display();
 e2.display();
 e1.caltax();
 e1.netsalary();
 e2.caltax();
 e2.netsalary();
 getch();
 return 0;
}
*********************************************************************************************************
PROGRAM ON INHERITENCE

#include<iostream.h>
#include<conio.h>
#include<string.h>

class Shape   // BASE CLASS
{
    public:
    int width;
    int height;
  void setWidth(int w)
  {
   width = w;
  }
  void setHeight(int h)
  {
   height = h;
  }
};
//
class Rectangle : public Shape
{
   public:
   int getArea()
   {
    return (width * height);
   }
};
int main()
{
 clrscr();
 Rectangle rect;
 rect.setWidth(5);
 rect.setHeight(7);
 cout<< "Total Area: "<<rect.getArea() << endl;
 getch();
 return 0;
}
**************************************************************************************
#include<iostream.h>
#include<conio.h>
#include<string.h>
#include<math.h>

//MULTILEVEL INHERITENCE

class Shape   // BASE CLASS - LEVEL 1
{
    public:
    int width;
    int height;
  void setWidth(int w)
  {
   width = w;
  }
  void setHeight(int h)
  {
   height = h;
  }
  void display()
  {
   cout<<"LEVEL-1"<<endl;
  }
};
//
class Rectangle : public Shape // LEVEL - 2
{
   public:
   int getArea()
   {
    return (width * height);
   }
   void display()
  {
   cout<<"LEVEL-2"<<endl;
  }
};

class Diag :  public Rectangle // LEVEL - 3
{
   public:
   void display()
  {
   cout<<"LEVEL-3"<<endl;
  }
} ;
int main()
{
 clrscr();
 //Rectangle rect;
 //rect.setWidth(5);
 //rect.setHeight(7);
 //cout<< "Total Area: "<<rect.getArea() << endl;
 Diag d;
 d.setWidth(5);
 d.setHeight(7);
 cout<< "Total Area: "<<d.getArea() << endl;
 d.display();
 getch();
 return 0;
}
***********************************************************************************
#include<iostream.h>
#include<conio.h>
//MULTIPLE INHERITENCE   - DIMOND PROBLEM
//                       A
//                 B          C
//                       D
class A   //Base- Class
{
  public:
  void display()
  {
    cout<<"A"<<endl;
  }
};
class B  : public A  //LEVEL-1
{
  public:
 void  display()
  {
    cout<<"B"<<endl;
  }
};
class C : public A    //LEVEL-1
{
  public:
  void display()
  {
    cout<<"C"<<endl;
  }
};
class D : public B , public C  //LEVEL-2
{
  public:

};
//
int main()
{
 D demo;
 clrscr();
 demo.display();
 getch();
 return 0;
}
*********************************************************************************************************
